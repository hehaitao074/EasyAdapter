{
  "name": "Easyadapter",
  "tagline": "Easy to use adapters.",
  "body": "# EasyAdapter\r\n\r\n一种简单的Adapter解决方案，支持多种ViewType，轻松创建`ViewHolder`模式Adapter. 支持`ListView`和`RecyclerView`.\r\n\r\n## 安装\r\n仅支持`ListView`\r\n\r\n``` groovy\r\ndependencies {\r\n    compile 'com.github.mzule.easyadapter:easyadapter:1.1.2'\r\n}\r\n```\r\n需要支持`RecyclerView`\r\n``` groovy\r\ndependencies {\r\n    compile 'com.github.mzule.easyadapter:easyadapter:1.1.2'\r\n    compile 'com.github.mzule.easyadapter:easyadapterrecycler:1.1.2'\r\n}\r\n```\r\n\r\n\r\n## 使用步骤\r\n\r\n项目包含四个类, `ViewType`, `SingleTypeAdapter`, `MultiTypeAdapter`, `TypePerEntityAdapter`, 其中`ViewType`负责创建、绑定(Hold)、渲染View；`SingleTypeAdapter`支持单独一种样式类型的Adapter, `MultiTypeAdapter`, `TypePerEntityAdapter`支持多种样式类型的Adapter；`TypePerEntityAdapter`是`MultiTypeAdapter`的子类。\r\n\r\n### 1. 编写`ViewType`(s)\r\n\r\n`ViewType`负责创建、绑定、渲染View，每个`ViewType`对应传统模式下的一个`ViewHolder`，一个典型的`ViewType`实现如下：\r\n\r\n``` java\r\npublic class TipViewType extends ViewType<String> {\r\n    private TextView tipView;\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        setContentView(R.layout.item_tip);\r\n        this.tipView = findViewById(R.id.tip);\r\n    }\r\n\r\n    @Override\r\n    public void onRender(int position, String tip) {\r\n        tipView.setText(tip);\r\n    }\r\n}\r\n```\r\n`ViewType`提供了一个`findViewById(int)`方法，可以根据声明的类型进行强制转换。\r\n\r\n1. `onCreate`可以通过调用`setContentView(int)`或者`setContentView(View)`创建View，初始化成员变量;\r\n2. `onRender(int, T)`负责渲染UI，绑定数据.\r\n\r\n`ViewType`还提供了一个`getAdapter()`方法直接直接操作Adapter.以及一个`isEditMode()`检查当前是否在编辑模式.\r\n\r\n### 2. 选择合适的`Adapter`\r\n\r\n项目为`ListView`,`RecyclerVIew`个提供了3个`Adapter`基类，名字一样，只是包名略作区分，分别是`com.github.mzule.easyadapter`,`com.github.mzule.easyadapter.recycler`。下面一一说明。\r\n\r\n#### 1. SingleTypeAdapter\r\n\r\n`SingleTypeAdapter`适合仅有一种类型View的`ListView`，典型实现如下：\r\n\r\n``` java\r\nclass PlainAdapter extends SingleTypeAdapter<String> {\r\n\r\n    public PlainAdapter(Context context) {\r\n        super(context);\r\n    }\r\n\r\n    @Override\r\n    protected Class<? extends ViewType> singleViewType() {\r\n        return TipViewType.class;\r\n    }\r\n}\r\n```\r\n\r\n#### 2. MultiTypeAdapter\r\n\r\n顾名思义，`MultiTypeAdapter`适用于需要在`ListView`上显示多种类型View的时候，比如说微博客户端，一堆微博之间，夹杂几个广告，正好适用。典型实现：\r\n\r\n``` java\r\nclass ArticleAdapter extends MultiTypeAdapter<Article> {\r\n\r\n    public ArticleAdapter(Context context) {\r\n        super(context);\r\n    }\r\n\r\n    @Override\r\n    protected void registerViewTypes() {\r\n        registerViewType(ArticleBriefViewType.class);\r\n        registerViewType(ArticleFullViewType.class);\r\n    }\r\n\r\n    @Override\r\n    protected Class<? extends ViewType> getViewType(int position, Article data) {\r\n        switch (data.getStyle()) {\r\n            case Article.STYLE_FULL:\r\n                return ArticleFullViewType.class;\r\n            case Article.STYLE_BRIEF:\r\n                return ArticleBriefViewType.class;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n#### 3.TypePerEntityAdapter\r\n\r\n`TypePerEntityAdapter`是`MultiTypeAdapter`的子类，适用于每个数据实体class都对应不同的`ViewType`实现，例如:\r\n\r\n``` java\r\nclass TimelineAdapter extends TypePerEntityAdapter<Object> {\r\n\r\n    public TimelineAdapter(Context context) {\r\n        super(context);\r\n    }\r\n\r\n    @Override\r\n    protected void mapEntityViewTypes() {\r\n        mapEntityViewType(Post.class, PostViewType.class);\r\n        mapEntityViewType(Repost.class, RepostViewType.class);\r\n        mapEntityViewType(String.class, TipViewType.class);\r\n        mapEntityViewType(Recommend.class, RecommendViewType.class);\r\n        mapEntityViewType(Ad.class, AdViewType.class);\r\n    }\r\n}\r\n```\r\n\r\n### 3. 应用`Adapter`\r\n通过`ListView#setAdapter(Adapter)`使用Adapter,通过`add(List)`/`addAndNotify(List)`/`clear()`/`clearAndNotify()`添加或修改Adapter内的数据。`add(List)`和`addAndNotify(List)`的区别在于是否自动调用`notifyDataSetChanged()`, `clear`亦然。\r\n\r\n``` java\r\nListView listView = (ListView) findViewById(R.id.listView);\r\nlistView.setAdapter(adapter);\r\nList<String> fake = new ArrayList<>();\r\nfor (int i = 0; i < 100; i++) {\r\n    fake.add(UUID.randomUUID().toString());\r\n}\r\nadapter.addAndNotify(fake);\r\n```\r\n\r\n## 尽情享用\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}